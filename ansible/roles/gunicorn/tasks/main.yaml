---

- name: Install OS Packages
  become: true
  dnf:
    name:
      - python-pip
      - python-virtualenv
    state: latest
    disable_gpg_check: yes

- name: Create the Gunicorn user
  become: true
  user:
    name: "{{ gunicorn_user }}"
    state: present
    shell: /bin/bash
    createhome: yes

- name: Upgrade/Install Python packages (Ansible requirements)
  pip: 
    name:
      - github3.py
    state: latest

- name: Check if the virtual environment exists
  become: true
  become_user: "{{ gunicorn_user }}"
  stat:
    path: "{{ virtualenv_path }}"
  register: virtualenv

- name: Create the virtual environment directory
  become: true
  file:
    path: "{{ virtualenv_path }}"
    state: directory
    owner: "{{ gunicorn_user }}"
    group: "{{ gunicorn_group }}"
    mode: 0700
  when: not virtualenv.stat.exists

- name: Create a virtual environment
  become: true
  become_user: "{{ gunicorn_user }}"
  when: not virtualenv.stat.exists
  command: virtualenv {{ virtualenv_path }}

- name: Get Scriptured Prayer Latest Release
  register: release_version
  community.general.github_release:
    user: "{{ github_user }}"
    repo: "{{ github_repo }}"
    action: latest_release

- name: Set project_path to the latest release
  set_fact:
    project_path: "/var/gunicorn/scriptured-prayer-{{ release_version.tag }}"

- name: Download the latest release
  become: true
  become_user: "{{ gunicorn_user }}"
  get_url:
    url: "https://github.com/{{ github_user }}/{{ github_repo }}/releases/download/{{ release_version.tag }}/scriptured-prayer-{{ release_version.tag }}.tar.gz"
    dest: "/home/{{ gunicorn_user }}/"

- name: Extract the latest release
  become: true
  become_user: "{{ gunicorn_user }}"
  unarchive:
    src: "/home/{{ gunicorn_user }}/scriptured-prayer-{{ release_version.tag }}.tar.gz"
    dest: "/var/gunicorn/"
    remote_src: yes
    creates: "{{ project_path }}"

- name: Install Python packages (app requirements)
  become: true
  become_user: "{{ gunicorn_user }}"
  pip:
    name:
      - gunicorn
      - pip
    virtualenv: "{{ virtualenv_path }}"
    state: latest

- name: Install Python packages (app requirements)
  become: true
  become_user: "{{ gunicorn_user }}"
  pip:
    requirements: "/var/gunicorn/scriptured-prayer-{{ release_version.tag }}/requirements.txt"
    virtualenv: "{{ virtualenv_path }}"

- name: Create Django Secret Key
  set_fact:
    django_secret: "{{ lookup('password', '/dev/null length=75 chars=ascii_letters,digits') }}"

- name: Run Django Migrations
  become: true
  become_user: "{{ gunicorn_user }}"
  environment: 
    DJANGO_SECRET_KEY: "{{ django_secret }}"
    DJANGO_SETTINGS_MODULE: "{{ project_name }}.settings"
  command: "{{ virtualenv_path }}/bin/python {{ project_path }}/manage.py migrate --noinput"

- name: Load starting data - bible
  when: db_created.changed
  become: true
  become_user: "{{ gunicorn_user }}"
  environment: 
    DJANGO_SECRET_KEY: "{{ django_secret }}"
    DJANGO_SETTINGS_MODULE: "{{ project_name }}.settings"
  command: "{{ virtualenv_path }}/bin/python {{ project_path }}/manage.py load_bible eng net"

- name: Load starting data - cards
  when: db_created.changed
  become: true
  become_user: "{{ gunicorn_user }}"
  environment: 
    DJANGO_SECRET_KEY: "{{ django_secret }}"
    DJANGO_SETTINGS_MODULE: "{{ project_name }}.settings"
  command: "{{ virtualenv_path }}/bin/python {{ project_path }}/manage.py load_cards"

- name: Create the Gunicorn systemd service file
  become: true
  template: src=gunicorn.service.j2
            dest="/etc/systemd/system/gunicorn-{{ project_name }}.service"
            backup=yes

- name: Create the Gunicorn socket file
  become: true
  template: src=gunicorn.socket.j2
            dest="/etc/systemd/system/gunicorn-{{ project_name }}.socket"
            backup=yes

- name: Start the Gunicorn socket
  become: true
  systemd:
    name: "gunicorn-{{ project_name }}.socket"
    state: started
    enabled: yes